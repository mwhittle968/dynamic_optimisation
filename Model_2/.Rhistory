d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.reproduction, ns.reproduction, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.reproduction, ns.reproduction, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.reproduction, ns.reproduction, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.2b <- sim(d.opt.2b, i = 0.2, j = 2, k = 2, l = 0.5, I = 100)
sim.2b
timeline <- c(1:60)
events <- c(NULL)
timeline <- c(time.steps, events)
time.steps <- c(1:60)
events <- c(NULL)
timeline <- c(time.steps, events)
timeline
for (t in 1:60){
if (t <= 13){timeline$events[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$events[t] <- "reproduction"}
else {timeline$events[t] <- "no.reproduction"}
}
time.steps <- c(1:27)
events <- c(1:27)
timeline <- c(time.steps, events)
for (t in 1:60){
if (t <= 13){timeline$events[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$events[t] <- "reproduction"}
else {timeline$events[t] <- "no.reproduction"}
}
timeline
timeline[1] ########################################## Dynamic Programming with for loops ##########################################
time.steps <- c(1:27)
events <- NULL
timeline <- data.frame(time.steps, events)
time.steps <- c(1:27)
events <- c(1:27)
timeline <- data.frame(time.steps, events)
for (t in 1:60){
if (t <= 13){timeline$events[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$events[t] <- "reproduction"}
else {timeline$events[t] <- "no.reproduction"}
}
time.steps <- c(1:27)
events <- c(1:27)
timeline <- data.frame(time.steps, events)
for (t in 1:27){
if (t <= 13){timeline$events[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$events[t] <- "reproduction"}
else {timeline$events[t] <- "no.reproduction"}
}
timeline
time.step <- c(1:27)
events <- c(1:27)
timeline <- data.frame(time.step, events)
for (t in 1:27){
if (t <= 13){timeline$events[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$events[t] <- "reproduction"}
else {timeline$events[t] <- "no.reproduction"}
}
remove(time.steps)
View(timeline)
time.step <- c(1:27)
event <- c(1:27)
timeline <- data.frame(time.step, event)
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
remove(events)
opt.for <- function(nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timelime, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
# Functions
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_3/functions_3.R")
opt.for <- function(timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timelime, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
opt.for <- function(timeline = timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timelime, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
View(timeline)
opt.for <- function(timeline = timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
opt.for <- function(timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
time.step <- c(1:27)
event <- c(1:27)
time.line <- data.frame(time.step, event)
for (t in 1:27){
if (t <= 13){time.line$event[t] <- "pupae"}
else if (t == 21 | t == 25){time.line$event[t] <- "reproduction"}
else {time.line$event[t] <- "no.reproduction"}
}
########################################## Dynamic Programming with for loops ##########################################
opt.for <- function(timeline = time.line, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(timeline, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(timeline, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
time.step <- c(1:27)
event <- c(1:27)
timeline <- data.frame(time.step, event)
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
########################################## Dynamic Programming with for loops ##########################################
opt.for <- function(nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
# Functions
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_3/functions_3.R")
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/interpolate.R")
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
timeline
sapply(timeline, class)
typeof(timeline)
time.step <- c(1:27)
event <- c(1:27)
timeline <- as.data.frame(time.step, event)
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
time.step <- c(1:27)
event <- c(1:27)
timeline <- c(time.step, event)
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
time.step <- c(1:27)
event <- c(1:27)
timeline <- as.data.frame(c(time.step, event))
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
opt.for <- function(nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
typeof(timeline)
time.step <- c(1:27)
event <- c(1:27)
as.data.frame
time.step <- c(1:27)
event <- c(1:27)
timeline <- as.data.frame(c(time.step, event))
typeof(timeline)
if (t <= 13){timeline$event[t] <- "pupae"}
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
timeline$event[2]
t = 26
timeline$event[t] == "pupae"
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
time.step <- c(1:27)
event <- c(1:27)
timeline <- c(time.step, event) %>%
as.data.frame
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
time.step <- c(1:27)
event <- c(1:27)
timeline <- c(time.step, event) #%>%
time.step <- c(1:27)
event <- c(1:27)
timeline <- c(time.step, event) #%>%
timeline <- cbind(time.step, event) #%>%
typeof(timeline)
sapply(timeline, class)
time.step <- c(1:27)
event <- c(1:27)
timeline <- cbind(time.step, event) %>%
as.data.frame
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
typof(timeline)
typeof(timeline)
time.step <- c(1:27)
event <- c(1:27)
timeline <- cbind(time.step, event) %>%
as.data.frame()
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
typeof(timeline)
time.step <- c(1:27)
event <- c(1:27)
timeline <- cbind(time.step, event) %>%
data.frame()
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
typeof(timeline)
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_3/functions_3.R")
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/interpolate.R")
########################################## Events timeline ##########################################
time.step <- c(1:27)
event <- c(1:27)
timeline <- cbind(time.step, event) %>%
data.frame()
for (t in 1:27){
if (t <= 13){timeline$event[t] <- "pupae"}
else if (t == 21 | t == 25){timeline$event[t] <- "reproduction"}
else {timeline$event[t] <- "no.reproduction"}
}
########################################## Dynamic Programming with for loops ##########################################
opt.for <- function(time.line, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(time.line, nh, ns, nh.repro, ns.repro, t, m) + S(time.line, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
opt.for <- function(time.line = timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 27, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(time.line, nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(time.line, nh, ns, nh.repro, ns.repro, t, m) + S(time.line, nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
d.opt.3a <- opt.for(i = 0.2, j = 2, k = 2, l = 0.5)
opt.plot.3a <- opt.plot(d.opt.3a)
opt.plot.3a
sim.3a <- sim(d.opt.3a, i = 0.2, j = 2, k = 2, l = 0.5, I = 100)
sim <- function(data, time.line = timeline, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 15, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(time.line, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(time.line, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(time.line, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 0.2, j = 2, k = 2, l = 0.5, I = 100)
sim.3a
