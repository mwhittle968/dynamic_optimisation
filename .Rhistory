n <- 5
m <- 1
i <- 0.1
j <- 2
k <- 2
#l <- 1
Q <- 100
# Source code
source("bilinear_interpolation.R")
load("rio.female.RData")
dir.create(paste("Model_", model.version, sep = ""))
# Vector of time steps and if the female reproduces or not; yes = reproductive time step
# 1st reproductive event at t = 8, and every 4 time steps thereafter
repro <- c(1:T)
for (t in 1:T){
repro[t] <- ifelse(t != 4 & t%%4 == 0, "yes", "no")
}
# Chop function limits the range of values the state variables can take:
chop <- function(x, x.min, x.max){
x = ifelse(x >= x.max, x.max, ifelse(x <= x.min, x.min, x))
return(x)
}
# Probability of survival to next time step
survival <- function(nh){
in.surv = ifelse(nh < nh.crit, 0, 1) # Below the threshold level of nh, probability of survival is zero
S = ex.surv*in.surv
return(S)
}
# Immediate contribution to fitness (B)
immediate.fitness <- function(t, nh, s){
if (repro[t] == "no" | nh < nh.repro | s < s.repro){
B = 0 # If it's a non-reproductive time step, or states are insufficient, the contribution to fitness is zero
} else {# If it's a reproductive time step and the states are sufficient, the fitness is calculated by reserves transferred to larva
nh.larva = (nh-nh.exp)*nh.transfer # After metabolic expenditure, female transfers some of her reserves and symbiont to larva
B = (m*nh.larva)-m*(nh.repro-nh.exp)*nh.transfer # Fitness is linear by nh.larva, and zero when nh = nh.repro
}
return(B)
}
# Maintenance, investment, regulation and production
maintenance <- function(s){
m = s*i
return(m)
}
increase <- function(s, d){
s. = ifelse(s == 0, 0, s + (d-1)*j)
return(s.)
}
decrease <- function(s, d){
s. = ifelse(s == 0, 0, s - (d-n-1)*k)
return(s.)
}
# New state variables:
new.state <- function(nh, s, t, d){
# If it's a reproductive time step and states are sufficient, reserves are transferred to larva
nh.larva = ifelse(repro[t] == "no" | nh < nh.repro, 0, (nh - nh.exp)*nh.transfer)
if (d == 1){
new.nh = chop((nh - nh.larva - nh.exp + N - maintenance(s)), 0, nh.max)
new.s = s # If d = 1, there is no investment into changing s
} else if (d > 1 & d <= (n+1)){
new.nh = chop((nh - nh.exp - nh.larva + N - maintenance(s) - (d-1)), 0, nh.max)
new.s = chop((increase(s, d)), 0, s.max) # If d is between 2 and n+1, there is investment into increasing s
} else {
new.nh = chop((nh - nh.exp - nh.larva + N - maintenance(s) - (d-n-1)), 0 , nh.max)
new.s = chop((decrease(s, d)), 0, s.max) # If d is greater than n+1, there is  investment into decreasing s
}
output = data.frame(new.nh, new.s)
return(output)
}
#pb <- txtProgressBar(min = 0, max = nh.max*s.max*(T-1), style = 3)
reproductive.value <- array(data = NA, dim = c(T, nh.max, s.max)) # Empty array for reproductive values (V), to be populated from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, s.max)) # Empty array for optimum decisions at each state and time
for (nh in 1:nh.max){
for (s in 1:s.max){
# Terminal fitness function is just the immediate contribution to fitness at final time step
reproductive.value[T, nh, s] <- immediate.fitness(T, nh, s)
}
}
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*n+1)) # Empty array for current reproductive value (H) (for one state)
for (d in 1:(2*n+1)){
# New states calculated for each decision
nh. = as.numeric(new.state(nh, s, t, d)[1])
s. = as.numeric(new.state(nh, s, t, d)[2])
# Calculate current reproductive value (H) given each decision
# Bilinear interpolation of reproductive.value array to find reproductive value (V) for the new states
H[d] = immediate.fitness(t, nh, s) + survival(nh.)*interpolate(reproductive.value, chop(nh., 0, nh.max), chop(s., 0, s.max), (t+1))
}
reproductive.value[t, nh, s] <- max(H) # Reproductive value (V) at time t is maximum value of H
d.opt[t, nh, s] <- which.max(H) # optimal decision is that which maximises current reproductive value (H)
#       setTxtProgressBar(pb...
}
}
}
# Assign object name to array d.opt based on model name, and save
assign(paste("d.opt.", model.name, sep = ""), d.opt)
do.call(save, list(paste("d.opt.", model.name, sep = ""), file = paste("Model_", model.version, "/d.opt.", model.name, ".RData", sep = "")))
# Visualisation of optimisation array
d.opt. <- melt(d.opt)
names(d.opt.) <- c("time.step", "Nh", "sym.pop", "decision")
d.opt.plot <- ggplot(data = d.opt., aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
scale_fill_gradient(low = "#80CBC4", high = "#00695C")+
#    theme(axis.title.y.right = element_text("Nh"))
# Assign object name to plot based on model name, and save
assign(paste("d.opt.plot.", model.name, sep = ""), d.opt.plot)
d.opt.plot <- ggplot(data = d.opt., aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
scale_fill_gradient(low = "#80CBC4", high = "#00695C")#+
# Assign object name to plot based on model name, and save
assign(paste("d.opt.plot.", model.name, sep = ""), d.opt.plot)
do.call(save, list(paste("d.opt.plot.", model.name, sep = ""), file = paste("Model_", model.version, "/d.opt.plot.", model.name, ".RData", sep = "")))
# Run simulations of hosts using the optimal strategy to regulate symbiont density
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), sym.pop = integer(), decision = integer())
for (q in 1:Q){
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
for (t in 1:(T-1)){
sim.q <- filter(sim.data, sim == q)
if (sim.q$nh.reserves[t] >= nh.crit){
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$sym.pop[t], t, d)[1])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$sym.pop[t], t, d)[2])
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., sym.pop = s., decision = NA)
} else {
break
}
}
}
# Assign object name to data frame based on model name, and save
assign(paste("sim.data.", model.name, sep = ""), sim.data)
do.call(save, list(paste("sim.data.", model.name, sep = ""), file = paste("Model_", model.version, "/sim.data.", model.name, ".RData", sep = "")))
# Plot of simulations
sim.plot <- ggplot(data = sim.data, aes(x = time.step, y = sym.pop, group = sim))+
geom_line()+
labs(x = "time step", y = "symbiont density")
# Assign object name to plot based on model name, and save
assign(paste("sim.plot.", model.name, sep = ""), sim.plot)
do.call(save, list(paste("sim.plot.", model.name, sep = ""), file = paste("Model_", model.version, "/sim.plot.", model.name, ".RData", sep = "")))
# Calculate sum-of-squares to estimate goodness-of-fit of simulations to empirical data
squares <- vector()
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
# rio.female are the symbiont densities in females from Rio et al., 2006
Obs <- filter(rio.female, time.step <= max(sim.q$time.step))
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
values <- (Exp.density-Obs$W.density)^2
squares <- c(squares, values)
}
rss <- mean(squares)
# save sum-of-squares
save(rss, file = paste("Model_", model.version, "/rss.", model.name, ".RData", sep = ""))
#print(proc.time() - ptm)
}
sim.plot
# Source code
source("Model_b.R")
dynamic.optimisation("6", "test")
dynamic.optimisation("6", "test")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_6/sim.plot.test.RData")
sim.plot.test
# Source code
source("Model_b.R")
dynamic.optimisation("6", "test")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_6/sim.plot.test.RData")
sim.plot.test
# Source code
source("Model_b.R")
dynamic.optimisation("6", "test")
######################## Grid search ##########################
# Set working directory
setwd("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation")
# Source code
source("Model_b.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
for (a in 1:5){
for (b in 1:3){
model.name = paste("5", a, b, sep = "")
print(model.name)
dynamic.optimisation("6", model.name, i = I[a], j = J[b], k = K[b])
load(paste("Model_6/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
model.fit <- arrange(model.fit, model.rss)
######################## Grid search ##########################
# Set working directory
setwd("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation")
# Source code
source("Model.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
for (a in 1:5){
for (b in 1:3){
model.name = paste("5", a, b, sep = "")
print(model.name)
dynamic.optimisation("6", model.name, i = I[a], j = J[b], k = K[b])
load(paste("Model_6/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
model.fit <- arrange(model.fit, model.rss)
######################## Grid search ##########################
# Set working directory
setwd("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation")
# Source code
source("Model.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
for (a in 1:5){
for (b in 1:3){
model.name = paste("6", a, b, sep = "")
print(model.name)
dynamic.optimisation("6", model.name, i = I[a], j = J[b], k = K[b])
load(paste("Model_6/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
model.fit <- arrange(model.fit, model.rss)
######################## Grid search ##########################
# Set working directory
setwd("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation")
# Source code
source("Model.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
for (a in 1:5){
for (b in 1:3){
model.name = paste("6", a, b, sep = "")
print(model.name)
dynamic.optimisation("6", model.name, i = I[a], j = J[b], k = K[b])
load(paste("Model_6/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
model.fit <- arrange(model.fit, model.rss)
View(model.fit)
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_6/sim.plot.613.RData")
sim.plot.613
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_6/d.opt.plot.613.RData")
d.opt.plot.613
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_6/d.opt.613.RData")
d.opt <_ d.opt.613
d.opt <- d.opt.613
# Visualisation of optimisation array
d.opt. <- melt(d.opt)
names(d.opt.) <- c("time.step", "Nh", "sym.pop", "decision")
d.opt.plot <- ggplot(data = d.opt., aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
facet_wrap(~Nh)
scale_fill_gradient(low = "#80CBC4", high = "#00695C")#+
names(d.opt.) <- c("time.step", "Nh", "sym.pop", "decision")
d.opt.plot <- ggplot(data = d.opt., aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
facet_wrap(~Nh)+
scale_fill_gradient(low = "#80CBC4", high = "#00695C")#+
d.opt.plot
nh.exp <- c(1:T)
for (t in 1:T){
nh.exp[t] <- ifelse(t <= 5, 2, ifelse(t <= 10, 1.5, 1))
}
T = 48
nh.exp <- c(1:T)
for (t in 1:T){
nh.exp[t] <- ifelse(t <= 5, 2, ifelse(t <= 10, 1.5, 1))
}
# Source code
source("Model.R")
dynamic.optimisation("7", "test", 0.01, 0.5, 0.5)
model.version <- "7"
model.name <- "test"
nh.max <- 20
ns.max <- 5
s.max <- 20
nh.repro <- 8
ns.repro <- 3
s.repro <- 7
nh.crit <- 4
#nh.crit.pupae <- 4
#nh.crit.adult <- 4
nh.transfer <- 0.6
#nh.exp <- 1
#mh.pupae <- 1
#mh.adult <- 2
#ms.pupae <- 2
#ms.adult <- 2
#ex.surv.pupae <- 1
#ex.surv.adult <- 1 - 1/48
ex.surv <- 1 - 1/48
T <- 48
N <- 5
n <- 5
m <- 1
i <- 0.1
j <- 2
k <- 2
#l <- 1
Q <- 100
dir.create(paste("Model_", model.version, sep = ""))
# Vector of time steps, metabolic expenditure, and if the female reproduces or not; yes = reproductive time step
# 1st reproductive event at t = 8, and every 4 time steps thereafter
repro <- c(1:T)
for (t in 1:T){
repro[t] <- ifelse(t != 4 & t%%4 == 0, "yes", "no")
}
nh.exp <- c(1:T)
for (t in 1:T){
nh.exp[t] <- ifelse(t <= 5, 2, ifelse(t <= 10, 1.5, 1))
}
# Chop function limits the range of values the state variables can take:
chop <- function(x, x.min, x.max){
x = ifelse(x >= x.max, x.max, ifelse(x <= x.min, x.min, x))
return(x)
}
# Probability of survival to next time step
survival <- function(nh){
in.surv = ifelse(nh < nh.crit, 0, 1) # Below the threshold level of nh, probability of survival is zero
S = ex.surv*in.surv
return(S)
}
# Immediate contribution to fitness (B)
immediate.fitness <- function(t, nh, s){
if (repro[t] == "no" | nh < nh.repro | s < s.repro){
B = 0 # If it's a non-reproductive time step, or states are insufficient, the contribution to fitness is zero
} else {# If it's a reproductive time step and the states are sufficient, the fitness is calculated by reserves transferred to larva
nh.larva = (nh-nh.exp[t])*nh.transfer # After metabolic expenditure, female transfers some of her reserves and symbiont to larva
nh.larva.min = (nh.repro-nh.exp[t])*nh.transfer
Bh = 1/(1+exp(nh.larva.min-nh.larva)) # Fitness is logistic by nh.larva and s
Bs = 1/(1+exp(s.repro-s))
B = Bh*Bs
}
return(B)
}
# Maintenance, investment, regulation and production
maintenance <- function(s){
m = s*i
return(m)
}
increase <- function(s, d){
s. = ifelse(s == 0, 0, s + (d-1)*j)
return(s.)
}
decrease <- function(s, d){
s. = ifelse(s == 0, 0, s - (d-n-1)*k)
return(s.)
}
# New state variables:
new.state <- function(nh, s, t, d){
# If it's a reproductive time step and states are sufficient, reserves are transferred to larva
nh.larva = ifelse(repro[t] == "no" | nh < nh.repro, 0, (nh - nh.exp[t])*nh.transfer)
if (d == 1){
new.nh = chop((nh - nh.larva - nh.exp[t] + N - maintenance(s)), 0, nh.max)
new.s = s # If d = 1, there is no investment into changing s
} else if (d > 1 & d <= (n+1)){
new.nh = chop((nh - nh.exp[t] - nh.larva + N - maintenance(s) - (d-1)), 0, nh.max)
new.s = chop((increase(s, d)), 0, s.max) # If d is between 2 and n+1, there is investment into increasing s
} else {
new.nh = chop((nh - nh.exp[t] - nh.larva + N - maintenance(s) - (d-n-1)), 0 , nh.max)
new.s = chop((decrease(s, d)), 0, s.max) # If d is greater than n+1, there is  investment into decreasing s
}
output = data.frame(new.nh, new.s)
return(output)
}
pb <- txtProgressBar(min = 0, max = nh.max*s.max*(T-1), style = 3)
reproductive.value <- array(data = NA, dim = c(T, nh.max, s.max)) # Empty array for reproductive values (V), to be populated from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, s.max)) # Empty array for optimum decisions at each state and time
for (nh in 1:nh.max){
for (s in 1:s.max){
# Terminal fitness function is just the immediate contribution to fitness at final time step
reproductive.value[T, nh, s] <- immediate.fitness(T, nh, s)
}
}
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*n+1)) # Empty array for current reproductive value (H) (for one state)
for (d in 1:(2*n+1)){
# New states calculated for each decision
nh. = as.numeric(new.state(nh, s, t, d)[1])
s. = as.numeric(new.state(nh, s, t, d)[2])
# Calculate current reproductive value (H) given each decision
# Bilinear interpolation of reproductive.value array to find reproductive value (V) for the new states
H[d] = immediate.fitness(t, nh, s) + survival(nh.)*interpolate(reproductive.value, chop(nh., 0, nh.max), chop(s., 0, s.max), (t+1))
}
reproductive.value[t, nh, s] <- max(H) # Reproductive value (V) at time t is maximum value of H
d.opt[t, nh, s] <- which.max(H) # optimal decision is that which maximises current reproductive value (H)
setTxtProgressBar(pb, (s-1) + (nh-1)*s.max + (T-t-1)*nh.max*s.max)
}
}
}
# Source code
source("bilinear_interpolation.R")
load("rio.female.RData")
reproductive.value <- array(data = NA, dim = c(T, nh.max, s.max)) # Empty array for reproductive values (V), to be populated from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, s.max)) # Empty array for optimum decisions at each state and time
for (nh in 1:nh.max){
for (s in 1:s.max){
# Terminal fitness function is just the immediate contribution to fitness at final time step
reproductive.value[T, nh, s] <- immediate.fitness(T, nh, s)
}
}
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*n+1)) # Empty array for current reproductive value (H) (for one state)
for (d in 1:(2*n+1)){
# New states calculated for each decision
nh. = as.numeric(new.state(nh, s, t, d)[1])
s. = as.numeric(new.state(nh, s, t, d)[2])
# Calculate current reproductive value (H) given each decision
# Bilinear interpolation of reproductive.value array to find reproductive value (V) for the new states
H[d] = immediate.fitness(t, nh, s) + survival(nh.)*interpolate(reproductive.value, chop(nh., 0, nh.max), chop(s., 0, s.max), (t+1))
}
reproductive.value[t, nh, s] <- max(H) # Reproductive value (V) at time t is maximum value of H
d.opt[t, nh, s] <- which.max(H) # optimal decision is that which maximises current reproductive value (H)
setTxtProgressBar(pb, (s-1) + (nh-1)*s.max + (T-t-1)*nh.max*s.max)
}
}
}
# Assign object name to array d.opt based on model name, and save
assign(paste("d.opt.", model.name, sep = ""), d.opt)
do.call(save, list(paste("d.opt.", model.name, sep = ""), file = paste("Model_", model.version, "/d.opt.", model.name, ".RData", sep = "")))
# Visualisation of optimisation array
d.opt. <- melt(d.opt)
names(d.opt.) <- c("time.step", "Nh", "sym.pop", "decision")
d.opt.plot <- ggplot(data = d.opt., aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
facet_wrap(~Nh)+
scale_fill_gradient(low = "#80CBC4", high = "#00695C")#+
# Assign object name to plot based on model name, and save
assign(paste("d.opt.plot.", model.name, sep = ""), d.opt.plot)
do.call(save, list(paste("d.opt.plot.", model.name, sep = ""), file = paste("Model_", model.version, "/d.opt.plot.", model.name, ".RData", sep = "")))
# Run simulations of hosts using the optimal strategy to regulate symbiont density
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), sym.pop = integer(), decision = integer())
for (q in 1:Q){
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
for (t in 1:(T-1)){
sim.q <- filter(sim.data, sim == q)
if (sim.q$nh.reserves[t] >= nh.crit){
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$sym.pop[t], t, d)[1])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$sym.pop[t], t, d)[2])
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., sym.pop = s., decision = NA)
} else {
break
}
}
}
# Assign object name to data frame based on model name, and save
assign(paste("sim.data.", model.name, sep = ""), sim.data)
do.call(save, list(paste("sim.data.", model.name, sep = ""), file = paste("Model_", model.version, "/sim.data.", model.name, ".RData", sep = "")))
# Plot of simulations
sim.plot <- ggplot(data = sim.data, aes(x = time.step, y = sym.pop, group = sim))+
geom_line()+
labs(x = "time step", y = "symbiont density")
# Assign object name to plot based on model name, and save
assign(paste("sim.plot.", model.name, sep = ""), sim.plot)
do.call(save, list(paste("sim.plot.", model.name, sep = ""), file = paste("Model_", model.version, "/sim.plot.", model.name, ".RData", sep = "")))
# Calculate sum-of-squares to estimate goodness-of-fit of simulations to empirical data
squares <- vector()
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
# rio.female are the symbiont densities in females from Rio et al., 2006
Obs <- filter(rio.female, time.step <= max(sim.q$time.step))
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
values <- (Exp.density-Obs$W.density)^2
squares <- c(squares, values)
}
rss <- mean(squares)
# save sum-of-squares
save(rss, file = paste("Model_", model.version, "/rss.", model.name, ".RData", sep = ""))
#print(proc.time() - ptm)
}
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_7/sim.plot.test.RData")
sim.plot.test
# Source code
source("Model.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
for (a in 1:5){
for (b in 1:3){
model.name = paste("", a, b, sep = "")
print(model.name)
dynamic.optimisation("7", model.name, i = I[a], j = J[b], k = K[b])
load(paste("Model_7/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
View(model.fit)
model.fit <- arrange(model.fit, model.rss)
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/dynamic_optimisation/Model_7/sim.plot.11.RData")
sim.plot.11
