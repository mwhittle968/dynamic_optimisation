new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-1)), 0, nh.max)
new.s = chop((investment(s, d)), 0, s.max)
} else { # If d is greater than N+1, there is regulation
new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-n-1)), 0 , nh.max)
new.s = chop((regulation(s, d)), 0, s.max)
}
output = data.frame(new.nh, new.ns, new.s)
return(output)
}
model.name <- "test"
nh.max <- 20
ns.max <- 5
s.max <- 20
nh.repro <- 8
ns.repro <- 3
s.repro <- 7
nh.crit.pupae <- 4
nh.crit.adult <- 4
nh.larva <- 0.6
ns.larva <- 0.6
mh.pupae <- 1
mh.adult <- 2
ms.pupae <- 2
ms.adult <- 2
ex.surv.pupae <- 1
ex.surv.adult <- 1 - 1/61
T <- 61
n <- 5
m <- 1
i <- 0.1
j <- 2
k <- 2
l <- 1
Q <- 100
parameters <- c(model.name, nh.max, ns.max, s.max, nh.repro, ns.repro, s.repro, nh.crit.pupae, nh.crit.adult, nh.larva, ns.larva,
mh.pupae, mh.adult, ms.pupae, ms.adult, ex.surv.pupae, ex.surv.adult, T, n, m, i, j, k, l, Q)
parameters <- t(as.data.frame(parameters))
colnames(parameters) <- c("model.name", "nh.max", "ns.max", "s.max", "nh.repro", "ns.repro", "s.repro", "nh.crit.pupae", "nh.crit.adult", "nh.larva", "ns.larva",
"mh.pupae", "mh.adult", "ms.pupae", "ms.adult", "ex.surv.pupae", "ex.surv.adult", "T", "n", "m", "i", "j", "k", "l", "Q")
#save(parameters, file = paste("Model_5/parameters.", model.name, ".RData", sep = ""))
time.step <- c(1:61)
F <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(repro = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(N = ifelse(stage == "pupae", 0, n))%>%
mutate(mh = ifelse(stage == "pupae", mh.pupae, mh.adult), ms = ifelse(stage == "pupae", ms.pupae, ms.adult))%>%
mutate(ex.surv = ifelse(stage == "pupae", ex.surv.pupae, ex.surv.adult))%>%
mutate(nh.crit = ifelse(stage == "pupae", nh.crit.pupae, nh.crit.adult))
#################################################################### Functions ######################################################
# Chop function limits the range of values the state variables can take:
chop <- function(x, x.min, x.max){
x = ifelse(x >= x.max, x.max, ifelse(x <= x.min, x.min, x))
return(x)
}
# Extrinsic survival and state-dependent survival function based on maternal reserves
S <- function(nh, t){
ex.survival = F$ex.surv[t]
in.survival = ifelse(nh < F$nh.crit[t], 0, 1)
S = ex.survival*in.survival
return(S)
}
# Fitness function based on maternal reserves and event step:
B <- function(nh, ns, s, t){
if (F$repro[t] == "no" | nh < nh.repro | ns < ns.repro | s < s.repro){
B = 0
} else {# If it's a reproductive time step  and the reserves are sufficient the fitness is calculated
nh.l = (nh-F$mh[t])*nh.larva # Mother gives some of her reserves to larva
ns.l = (ns-F$ms[t])*ns.larva
B.nh = (m*nh.l)-m*(nh.repro-F$mh[t])*nh.larva # linear by nh
B.ns = ifelse(ns < (ns.repro-F$ms[t])*ns.larva, 0, 1) # step function by ns
B = B.nh*B.ns
}
return(B)
}
# Maintenance, investment, regulation and production
maintenance <- function(s){
m = s*i
return(m)
}
investment <- function(s, d){
s. = ifelse(s == 0, 0, s + (d-1)*j)
return(s.)
}
regulation <- function(s, d){
s. = ifelse(s == 0, 0, s - (d-n-1)*k)
return(s.)
}
production <- function(s){
p = s*l
return(p)
}
# New state variables:
new.state <- function(nh, ns, s, t, d){
nh.l = ifelse(F$repro[t] == "no" | nh < nh.repro | ns < ns.repro, 0, (nh - F$mh[t])*nh.larva)
ns.l = ifelse(F$repro[t] == "no" | nh < nh.repro | ns < ns.repro, 0, (ns - F$ms[t])*ns.larva)
new.ns = chop((ns - F$ms[t] - ns.larva + production(s)), 0, ns.max)
if (d == 1){ # If d = 1, there is no investment or regulation
new.nh = chop((nh - nh.l - F$mh[t] + F$N[t] - maintenance(s)), 0, nh.max)
new.s = s
} else if (d > 1 & d <= (n+1)){ # If d is between 2 and N+1, there is investment
new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-1)), 0, nh.max)
new.s = chop((investment(s, d)), 0, s.max)
} else { # If d is greater than N+1, there is regulation
new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-n-1)), 0 , nh.max)
new.s = chop((regulation(s, d)), 0, s.max)
}
output = data.frame(new.nh, new.ns, new.s)
return(output)
}
new.state(20, 5, 2, 2)
new.state(20, 5, 2, 1, 2)
model.name <- "test"
nh.max <- 8
ns.max <- 5
s.max <- 8
nh.repro <- 3
ns.repro <- 3
s.repro <- 3
nh.crit.pupae <- 1
nh.crit.adult <- 2
nh.larva <- 0.6
ns.larva <- 0.6
mh.pupae <- 0.01
mh.adult <- 2
ms.pupae <- 0.01
ms.adult <- 2
ex.surv.pupae <- 1
ex.surv.adult <- 1 - 1/61
T <- 15
n <- 3
m <- 1
i <- 0.1
j <- 2
k <- 2
l <- 1
Q <- 100
# Source code
source("Model.R")
dynamic.optimisation("test", i = 0.1, j = 2, k = 2, l = 1)
source("interpolate.R")
dynamic.optimisation("test", i = 0.1, j = 2, k = 2, l = 1)
dynamic.optimisation("test", i = 0.1, j = 2, k = 2, l = 1)
model.name <- "test"
nh.max <- 8
ns.max <- 5
s.max <- 8
nh.repro <- 3
ns.repro <- 3
s.repro <- 3
nh.crit.pupae <- 1
nh.crit.adult <- 2
nh.larva <- 0.6
ns.larva <- 0.6
mh.pupae <- 0.01
mh.adult <- 2
ms.pupae <- 0.01
ms.adult <- 2
ex.surv.pupae <- 1
ex.surv.adult <- 1 - 1/61
T <- 15
n <- 3
m <- 1
i <- 0.1
j <- 2
k <- 2
l <- 1
Q <- 100
####################################################### Data frames for events and parameters ######################################################
parameters <- c(model.name, nh.max, ns.max, s.max, nh.repro, ns.repro, s.repro, nh.crit.pupae, nh.crit.adult, nh.larva, ns.larva,
mh.pupae, mh.adult, ms.pupae, ms.adult, ex.surv.pupae, ex.surv.adult, T, n, m, i, j, k, l, Q)
parameters <- t(as.data.frame(parameters))
colnames(parameters) <- c("model.name", "nh.max", "ns.max", "s.max", "nh.repro", "ns.repro", "s.repro", "nh.crit.pupae", "nh.crit.adult", "nh.larva", "ns.larva",
"mh.pupae", "mh.adult", "ms.pupae", "ms.adult", "ex.surv.pupae", "ex.surv.adult", "T", "n", "m", "i", "j", "k", "l", "Q")
#save(parameters, file = paste("Model_5/parameters.", model.name, ".RData", sep = ""))
time.step <- c(1:61)
F <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(repro = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(N = ifelse(stage == "pupae", 0, n))%>%
mutate(mh = ifelse(stage == "pupae", mh.pupae, mh.adult), ms = ifelse(stage == "pupae", ms.pupae, ms.adult))%>%
mutate(ex.surv = ifelse(stage == "pupae", ex.surv.pupae, ex.surv.adult))%>%
mutate(nh.crit = ifelse(stage == "pupae", nh.crit.pupae, nh.crit.adult))
#################################################################### Functions ######################################################
# Chop function limits the range of values the state variables can take:
chop <- function(x, x.min, x.max){
x = ifelse(x >= x.max, x.max, ifelse(x <= x.min, x.min, x))
return(x)
}
# Extrinsic survival and state-dependent survival function based on maternal reserves
S <- function(nh, t){
ex.survival = F$ex.surv[t]
in.survival = ifelse(nh < F$nh.crit[t], 0, 1)
S = ex.survival*in.survival
return(S)
}
# Fitness function based on maternal reserves and event step:
B <- function(nh, ns, s, t){
if (F$repro[t] == "no" | nh < nh.repro | ns < ns.repro | s < s.repro){
B = 0
} else {# If it's a reproductive time step  and the reserves are sufficient the fitness is calculated
nh.l = (nh-F$mh[t])*nh.larva # Mother gives some of her reserves to larva
ns.l = (ns-F$ms[t])*ns.larva
B.nh = (m*nh.l)-m*(nh.repro-F$mh[t])*nh.larva # linear by nh
B.ns = ifelse(ns < (ns.repro-F$ms[t])*ns.larva, 0, 1) # step function by ns
B = B.nh*B.ns
}
return(B)
}
# Maintenance, investment, regulation and production
maintenance <- function(s){
m = s*i
return(m)
}
investment <- function(s, d){
s. = ifelse(s == 0, 0, s + (d-1)*j)
return(s.)
}
regulation <- function(s, d){
s. = ifelse(s == 0, 0, s - (d-n-1)*k)
return(s.)
}
production <- function(s){
p = s*l
return(p)
}
# New state variables:
new.state <- function(nh, ns, s, t, d){
nh.l = ifelse(F$repro[t] == "no" | nh < nh.repro | ns < ns.repro, 0, (nh - F$mh[t])*nh.larva)
ns.l = ifelse(F$repro[t] == "no" | nh < nh.repro | ns < ns.repro, 0, (ns - F$ms[t])*ns.larva)
new.ns = chop((ns - F$ms[t] - ns.larva + production(s)), 0, ns.max)
if (d == 1){ # If d = 1, there is no investment or regulation
new.nh = chop((nh - nh.l - F$mh[t] + F$N[t] - maintenance(s)), 0, nh.max)
new.s = s
} else if (d > 1 & d <= (n+1)){ # If d is between 2 and N+1, there is investment
new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-1)), 0, nh.max)
new.s = chop((investment(s, d)), 0, s.max)
} else { # If d is greater than N+1, there is regulation
new.nh = chop((nh - F$mh[t] - nh.l + F$N[t] - maintenance(s) - (d-n-1)), 0 , nh.max)
new.s = chop((regulation(s, d)), 0, s.max)
}
output = data.frame(new.nh, new.ns, new.s)
return(output)
}
#pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c(T, nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
t = T-1
nh = 1
ns = 1
s = 1
print("nh, ns, s =")
print(nh)
print(ns)
print(s)
H = array(data = NA, dim = (2*n+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*n+1)){
nh. = as.numeric(new.state(nh, ns, s, t, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, t, d)[2])
s. = as.numeric(new.state(nh, ns, s, t, d)[3])
H[d] = B(nh, ns, s, t) + S(nh., t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max), chop(s., 1, s.max), (t+1))
}
print("H =")
print(H)
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
View(`F`)
T <- 22
#pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c(T, nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
t = 21
nh = 20
nh = 5
ns = 4
s = 4
print("nh, ns, s =")
print(nh)
print(ns)
print(s)
H = array(data = NA, dim = (2*n+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*n+1)){
nh. = as.numeric(new.state(nh, ns, s, t, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, t, d)[2])
s. = as.numeric(new.state(nh, ns, s, t, d)[3])
H[d] = B(nh, ns, s, t) + S(nh., t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max), chop(s., 1, s.max), (t+1))
}
print("H =")
print(H)
S(nh., t)
nh.
d = 1
nh. = as.numeric(new.state(nh, ns, s, t, d)[1]) # Calculate new values for states
nh.
d = 2
nh. = as.numeric(new.state(nh, ns, s, t, d)[1]) # Calculate new values for states
nh.
S(nh., t)
nh. = 3.8
S(nh., t)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Obs.F.data.Rdata")
# Source code
source("Model.R")
source("interpolate.R")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(1, 2, 6)
K <- c(1, 2, 6)
L <- c(0.2, 1, 1.5, 3)
dynamic.optimisation("test", i = 0.1, j = 2, k = 2, l = 1)
# Source code
source("Model.R")
dynamic.optimisation("test.2", i = 0.1, j = 2, k = 2, l = 1)
# Source code
source("Model.R")
dynamic.optimisation("test.2", i = 0.1, j = 2, k = 2, l = 1)
# Source code
source("Model.R")
dynamic.optimisation("test.2", i = 0.1, j = 2, k = 2, l = 1)
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/sim.plot.test.RData")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/sim.plot.test.2.RData")
sim.plot.test
sim.plot.test.2
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/d.opt.plot.test.RData")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/d.opt.plot.test.2.RData")
d.opt.test
d.opt.plot.test
d.opt.plot.test.2
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/d.opt.test.RData")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/d.opt.test.2.RData")
all.equal(d.opt.test, d.opt.test.2)
identical(d.opt.test, d.opt.test.2)
View(sim.plot.test)
View(sim.plot.test.2)
View(sim.plot.test)
View(sim.plot.test.2)
View(sim.plot.test)
View(sim.plot.test.2)
sim.plot.test
sim.plot.test.2
d.opt.test
d.opt.test.2
library(metaDigitise)
library(dplyr)
fat_consumption <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Bursell_1960")
fat_consumption
fat_consumption <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Bursell_1960")
fat_consumption
save(fat_consumption, file = "C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model")
save(fat_consumption, file = "C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/fat.consumption.Bursell.1960.RData")
getwd()
# Source code
source("Model.R")
source("interpolate.R")
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Obs.F.data.Rdata")
# Source code
source("Model.R")
# Source code
source("Model.R")
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
L <- c(0.2, 1, 1.5, 3)
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("5", a, b, c, sep = "")
print(mode.name)
dynamic.optimisation(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
load(paste("Model_5/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
}
model.fit <- arrange(model.fit, model.rss)
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(0.5, 1, 1.5)
K <- c(0.5, 1, 1.5)
L <- c(0.2, 1, 1.5, 3)
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("5", a, b, c, sep = "")
print(model.name)
dynamic.optimisation(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
load(paste("Model_5/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
}
model.fit <- arrange(model.fit, model.rss)
model.fit
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/sim.plot.5412.RData")
sim.plot.5412
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/sim.plot.5423.RData")
sim.plot.5423
View(data)
library(dplyr)
reproduction <- c(1:47) %>%
as.data.frame()
View(reproduction)
reproduction <- c(1:47) %>%
as.data.frame(col.names = "reproduction")
View(reproduction)
reproduction <- c(1:47) %>%
as.data.frame(col.names = "reproduction")
reproduction <- c(1:47) %>%
as.data.frame(col.names = c("reproduction"))
View(reproduction)
reproduction <- c(1:47) %>%
as.data.frame(col.names = c("reproduction"))
rm(reproduction)
repro <- c(1:47)
for (t in 1:47){
repro[t] <- ifelse(t != 4 & t%%4 == 0, "yes", "no")
}
repro
repro <- c(1:58)
for (t in 1:58){
repro[t] <- ifelse(t != 4 & t%%4 == 0, "yes", "no")
}
repro
length(repro)
length(repro == "yes")
repro <- c(1:48)
for (t in 1:48){
repro[t] <- ifelse(t != 4 & t%%4 == 0, "yes", "no")
}
repro
load("~/PhD/Notes/Model/R_code/Obs.F.data.Rdata")
View(Obs.F.data)
library(metaDigitise)
library(dplyr)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-40)/(9/4))
save(Obs.F.data, file = "Obs.F.data.Rdata")
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= )
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= 1)
getwd()
# Source code
source("Model.R")
source("interpolate.R")
dynamic.optimisation("test", 1, 1, 1, 1)
dynamic.optimisation("test", i = 1, j = 1, k = 1, l = 1)
Obs
View(Obs.F.data)
save(Obs.F.data, file = "Obs.F.data.Rdata")
load("Obs.F.data.RData")
# Source code
source("Model.R")
dynamic.optimisation("test", i = 1, j = 1, k = 1, l = 1)
dynamic.optimisation("test", i = 0.01, j = 0.5, k = 0.5, l = 0.2)
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= 1)
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= 1)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= 1)
save(Obs.F.data, file = "Obs.F.data.Rdata")
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Obs.F.data.Rdata")
View(Obs.F.data)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = (day-39)/(9/4)) %>%
filter(time.step >= 1)
save(Obs.F.data, file = "Obs.F.data.Rdata")
# Source code
source("Model.R")
dynamic.optimisation("test", i = 0.01, j = 0.5, k = 0.5, l = 0.2)
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_5/sim.plot.test.RData")
sim.plot.test
model.version <- "6"
dir.create(paste("Model_", model.version, sep = ""))
# Source code
source("Model.R")
dynamic.optimisation(6, "test", i = 0.01, j = 0.5, k = 0.5, l = 0.2)
