s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
sim
sim <- function(data, event = time.event, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
sim.3a
sim
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
i in 1:I
i = 100
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
I = 100
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
}
else {
break # if reserves get to zero, stop the simulation
}
}
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
d.opt.3a
sim <- function(data, event = time.event, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max/3), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
sim <- function(data, event = time.event, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(event[t], sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
new.state(1, 10, 3, 3, 10, 5, 10, 4, 2, 1, 1, 5, 2, 3, 3, 2, 1)
new.state("pupae", 10, 3, 3, 10, 5, 10, 4, 2, 1, 1, 5, 2, 3, 3, 2, 1)
t = 1
event[t]
time.event <- c(1:61)
for (t in 1:61){
if (t <= 13){time.event[t] <- "pupae"}
else if (t %in% seq(from = 21, to = 61, by = 4)){time.event[t] <- "reproduction"}
else {time.event[t] <- "no.reproduction"}
}
time.event[t]
event[t]
# Functions
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_3/functions_3.R")
opt <- function(nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, mh, ms, t, m) + S(nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
sim <- function(data, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, t, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
d = interpolate(d.opt.3a, 9, 3, 3, 1)
d
new.state(9, 3, 3, 10, 5, 10, 4, 2, 1, 1, 1, 5, 2, 3, 3, 2, 1)
sim <- function(data, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
i = 1
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
t = 1
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
print(t)}
sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1
d = interpolate(d.opt.3a, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
nh.
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
ns.
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
s.
sim <- add_row(sim, time.step = (t+1), sym.pop = s., nh.reserves = nh., ns.reserves = ns., decision = NA) # populate data frame with new state values
sim
print(t)}
print(t)
print(sim)
t = 2
sim <- function(data, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
sim.3a <- sim(d.opt.3a, i = 2, j = 3, k = 3, l = 2, I = 100)
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
t = 1
sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1
d = interpolate(d.opt.3a, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t)
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA) # populate data frame with new state values
sim
t = 2
sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1
d = interpolate(d.opt.3a, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t)
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, mh, ms, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA) # populate data frame with new state values
sim
time.event <- mutate(time.event, mh = ifelse(time.event == "pupae", 0.1, 1))
time.event <- c(1:61)
for (t in 1:61){
if (t <= 13){time.event[t] <- "pupae"}
else if (t %in% seq(from = 21, to = 61, by = 4)){time.event[t] <- "reproduction"}
else {time.event[t] <- "no.reproduction"}
}
time.event <- as.data.frame(time.event)%>%
mutate(time.event, mh = ifelse(time.event == "pupae", 0.1, 1))
View(time.event)
time.step <- c(1:61)
female <- as.data.frame(time.step)
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(t <= 13, "pupae", "adult"))
remove(time.event)
remove(time)
remove(time.step)
time.step <- c(1:61)
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(t <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), 1, 0))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(in.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
View(female)
female <- as.data.frame()%>%
mutate(time.step = c(1:61))%>%
mutate(stage = ifelse(t <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), 1, 0))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(in.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
time.step <- c(1:61)
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(t <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), 1, 0))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(in.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
time.step <- c(1:61)
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), 1, 0))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(in.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), 1, 0))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(ex.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(N = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(ex.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(n = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(ex.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
new.state <- function(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d){
nh.larva = ifelse(female$reproduction == "no" | nh < nh.repro | ns < ns.repro, 0, (nh - female$mh[t])*0.6)
ns.larva = ifelse(female$reproduction == "no" | nh < nh.repro | ns < ns.repro, 0, (ns - female$ms[t])*0.6)
new.ns = chop((ns - female$ms[t] - ns.larva + production(s, l)), 0, ns.max)
if (d == 1){ # If d = 1, there is no investment or regulation
new.nh = chop((nh - nh.larva - female$mh[t] + female$n[t] - maintenance(s, i)), 0, nh.max)
new.s = s
} else if (d > 1 & d <= (N+1)){ # If d is between 2 and N+1, there is investment
new.nh = chop((nh - female$mh[t] - nh.larva + female$n[t] - maintenance(s, i) - (d-1)), 0, nh.max)
new.s = chop((investment(s, j, d)), 0, s.max)
} else { # If d is greater than N+1, there is regulation
new.nh = chop((nh - female$mh[t] - nh.larva + female$n[t] - maintenance(s, i) - (d-N-1)), 0 , nh.max)
new.s = chop((regulation(s, N, k, d)), 0, s.max)
}
output = data.frame(new.nh, new.ns, new.s)
return(output)
}
# Functions
source("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_3/functions_3.R")
time.step <- c(1:61)
female <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(reproduction = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(n = ifelse(stage == "pupae", 0, 5))%>%
mutate(mh = ifelse(stage == "pupae", 0.2, 1), ms = ifelse(stage == "pupae", 0.2, 1))%>%
mutate(ex.survival = ifelse(stage == "pupae", 1, (1 - 1/61)))
opt <- function(nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, T = 61, N = 5, m = 1, i, j, k, l){
pb <- txtProgressBar(min = 0, max = ns.max*nh.max*s.max*(T-1), style = 3)
V <- array(data = NA, dim = c((T), nh.max, ns.max, s.max)) # Empty fitness array, to be populated with values from T back to 1
d.opt <- array(data = NA, dim = c((T-1), nh.max, ns.max, s.max)) # Empty array for best decisions at each state and time
V[T,,,] <- 0 # terminal fitness function
for (t in (T-1):1){ # Iterates backwards in time
for (nh in 1:nh.max){
for (ns in 1:ns.max){
for (s in 1:s.max){
H = array(data = NA, dim = (2*N+1)) # Empty reproductive value array (for one state)
for (d in 1:(2*N+1)){
nh. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[1]) # Calculate new values for states
ns. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(nh, ns, s, nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[3])
H[d] = B(nh, ns, nh.repro, ns.repro, t, m) + S(nh., nh.crit, t)*interpolate(V, chop(nh., 1, nh.max), chop(ns., 1, ns.max),
chop(s., 1, s.max), (t+1)) # Calculate reproductive value given decision
}
V[t, nh, ns, s] <- max(H) # define fitness as maximum of the reproductive values
d.opt[t, nh, ns, s] <- which.max(H) # Set best decision as the one which maximises fitness
setTxtProgressBar(pb, (s-1) + (ns-1)*s.max + (nh-1)*ns.max*s.max + (T-t-1)*nh.max*ns.max*s.max)
}
}
}
}
return(d.opt)
}
opt.plot <- function(d.opt){
d.opt = melt(d.opt)
names(d.opt) <- c("time.step", "Nh", "Ns", "sym.pop", "decision")
plot <- ggplot(data = d.opt, aes(time.step, sym.pop, fill = decision)) +
geom_tile()+
facet_grid(Nh ~ Ns)+
scale_fill_gradient(low = "#80CBC4", high = "#00695C")+
theme(axis.title.y.right = element_text("Nh"),
axis.title.x.top = element_text("Ns"))
return(plot)
}
sim <- function(data, nh.max = 10, ns.max = 5, s.max = 10, nh.repro = 4, ns.repro = 2, nh.crit = 1, mh = 1, ms = 1, T = 61, N = 5, i, j, k, l, I){
sim.plot <- ggplot(NULL, aes(x = time.step, y = sym.pop)) # empty plot to be populated with simulation runs
for (i in 1:I){
sim <- data.frame(time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())%>% # empty data frame to be populated with state values and allocations
add_row(time.step = 1,  nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 0.5)), 0, nh.max), ns.reserves = chop(round(rnorm(1, mean = (ns.max/2), sd = 0.5)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/3), sd = 0.5)), 0, s.max), decision = NA) # initial state values chosen at random
for (t in 1:(T-1)){
if (sim$nh.reserves[t] >= nh.crit & sim$ns.reserves[t] >= 1 & sim$sym.pop[t] >= 1){
d = interpolate(data, sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], t) # extract optimum allocation amount based on state values
sim$decision[t] = d
nh. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[1])
ns. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[2])
s. = as.numeric(new.state(sim$nh.reserves[t], sim$ns.reserves[t], sim$sym.pop[t], nh.max, ns.max, s.max, nh.repro, ns.repro, t, N, i, j, k, l, d)[3])
sim <- add_row(sim, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA) # populate data frame with new state values
print(t)}
else {
break # if reserves get to zero, stop the simulation
}
}
print(sim)
sim.plot <- sim.plot+
geom_line(data = sim, aes(x = time.step, y = sym.pop, group = 1)) # add data frame to plot
}
sim.plot <- sim.plot+
labs(x = "time step", y = "symbiont density")
return(sim.plot)
}
d.opt.3a <- opt(i = 2, j = 3, k = 3, l = 2)
getwd()
# Functions
source("Model_3/functions_3.R")
# Functions
wd <- getwd()
wd
source(wd"/Model_3/functions_3.R")
# Functions
wd <- getwd()
source(wd"functions_3.R")
source(wd"~/functions_3.R")
# Functions
wd <- getwd()
wd
source("functions_3.R")
setwd("C:/Users/apico/Documents/Mathilda/PhD/Notes/Model/R_code")
# Functions
source("Model_3/functions_3.R")
source("interpolate.R")
setwd("C:/Users/apico/Documents/Mathilda/PhD/Notes/Model/R_code")
# Functions
source("Model_2/functions_2.R")
source("interpolate.R")
save(d.opt.2b, file = "Model_2/d.opt.2b.RData")
save(d.opt.3a, file = "Model_3/d.opt.3a.RData")
setwd("C:/Users/apico/Documents/Mathilda/PhD/Notes/Model/R_code")
