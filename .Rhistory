break
}
}
}
q = 1
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
t = 1
sim.q <- filter(sim.data, sim == q)
View(sim.q)
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
sim.q <- filter(sim.data, sim == q)
View(sim.q)
typeof(sim.q)
sim.q$time.step
sim.q$nh.reserves[t] >= F$nh.crit[t]
parameters <- c(model.name, nh.max, ns.max, s.max, nh.repro, ns.repro, s.repro, nh.crit.pupae, nh.crit.adult, nh.larva, ns.larva,
mh.pupae, mh.adult, ms.pupae, ms.adult, ex.surv.pupae, ex.surv.adult, T, n, m, i, j, k, l, Q)
parameters <- t(as.data.frame(parameters))
colnames(parameters) <- c("model.name", "nh.max", "ns.max", "s.max", "nh.repro", "ns.repro", "s.repro", "nh.crit.pupae", "nh.crit.adult", "nh.larva", "ns.larva",
"mh.pupae", "mh.adult", "ms.pupae", "ms.adult", "ex.surv.pupae", "ex.surv.adult", "T", "n", "m", "i", "j", "k", "l", "Q")
time.step <- c(1:61)
F <- as.data.frame(time.step)%>%
mutate(stage = ifelse(time.step <= 13, "pupae", "adult"))%>%
mutate(repro = ifelse(time.step %in% seq(from = 21, to = 61, by = 4), "yes", "no"))%>%
mutate(N = ifelse(stage == "pupae", 0, n))%>%
mutate(mh = ifelse(stage == "pupae", mh.pupae, mh.adult), ms = ifelse(stage == "pupae", ms.pupae, ms.adult))%>%
mutate(ex.surv = ifelse(stage == "pupae", ex.surv.pupae, ex.surv.adult))%>%
mutate(nh.crit = ifelse(stage == "pupae", nh.crit.pupae, nh.crit.adult))
sim.q$nh.reserves[t] >= F$nh.crit[t]
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
for (q in 1:Q){
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
for (t in 1:(T-1)){
sim.q <- filter(sim.data, sim == q)
if (sim.q$nh.reserves[t] >= F$nh.crit[t]){
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.q$decision[t] = d
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
} else {
break
}
}
}
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/.RData")
library(metaDigitise)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2week.adult", "4week.adult")
W.density <- c(data$mean[1:8])
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
data
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Model_3/Obs.F.data.Rdata")
Obs.F.plot <- ggplot(data = Obs.F.data, aes(x = time.step, y = W.density))+
geom_line()
Obs.F.plot
View(sim.data)
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
q = 1
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
sim.data
t = 1
sim.q <- filter(sim.data, sim == q)
print(sim.q)
sim.q$nh.reserves[t] >= F$nh.crit[t]
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.q$decision[t] = d
print(sim.q)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh., ns., s.)
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
q = 1
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
print(sim.data)
t = 1
sim.q <- filter(sim.data, sim == q)
print(sim.q)
sim.q$nh.reserves[t] >= F$nh.crit[t]
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[t] = d
print(sim.data)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
t = 2
sim.q <- filter(sim.data, sim == q)
print(sim.q)
sim.q$nh.reserves[t] >= F$nh.crit[t]
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[t] = d
print(sim.data)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
q = 2
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
print(sim.data)
t = 1
sim.q <- filter(sim.data, sim == q)
print(sim.q)
sim.q$nh.reserves[t] >= F$nh.crit[t]
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
sim.data
d = 3
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
print(sim.data)
d = 1
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
print(sim.data)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
t = 2
sim.q <- filter(sim.data, sim == q)
print(sim.q)
sim.q$nh.reserves[t] >= F$nh.crit[t]
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
print(sim.data)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
for (q in 1:Q){
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
print(sim.data)
for (t in 1:(T-1)){
sim.q <- filter(sim.data, sim == q)
print(sim.q)
if (sim.q$nh.reserves[t] >= F$nh.crit[t]){
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
print(sim.data)
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
print(nh.)
print(ns.)
print(s.)
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
print(sim.data)
} else {
break
}
}
}
sim.data <- data.frame(sim = integer(), time.step = integer(), nh.reserves = integer(), ns.reserves = integer(), sym.pop = integer(), decision = integer())
for (q in 1:Q){
sim.data <- add_row(sim.data, sim = q, time.step = 1, nh.reserves = chop(round(rnorm(1, mean = (nh.max), sd = 1)), 0, nh.max),
ns.reserves = chop(round(rnorm(1, mean = (ns.max), sd = 1)), 0, ns.max),
sym.pop = chop(round(rnorm(1, mean = (s.max/5), sd = 1)), 0, s.max), decision = NA)
print(sim.data)
for (t in 1:(T-1)){
sim.q <- filter(sim.data, sim == q)
if (sim.q$nh.reserves[t] >= F$nh.crit[t]){
d = interpolate(d.opt, chop(sim.q$nh.reserves[t], 1, nh.max), chop(sim.q$ns.reserves[t], 1, ns.max), chop(sim.q$sym.pop[t], 1, s.max), t)
sim.data$decision[sim.data$sim == q & sim.data$time.step == t] <- d
nh. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[1])
ns. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[2])
s. = as.numeric(new.state(sim.q$nh.reserves[t], sim.q$ns.reserves[t], sim.q$sym.pop[t], t, d)[3])
sim.data <- add_row(sim.data, sim = q, time.step = (t+1), nh.reserves = nh., ns.reserves = ns., sym.pop = s., decision = NA)
} else {
break
}
}
}
sim.plot <- ggplot(data = sim.data, aes(x = time.step, y = sym.pop, group = sim))+
geom_line()+
labs(x = "time step", y = "symbiont density")
sim.plot
squares <- data.frame(values = integer())
q = 1
sim.q <- filter(sim.data, sim == q)
sim.q
Exp.F.data = interp1(sim.q$time.step, sim.q$sym.pop, Obs.F.data$time.step)
Exp.F.data
Obs.F.data$time.step
values = (Exp.F.data-Obs.F.data$W.density)^2
squares <- rbind(squares, values)
squares
squares <- data.frame(values = integer())
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
Exp.F.data = interp1(sim.q$time.step, sim.q$sym.pop, Obs.F.data$time.step)
values = (Exp.F.data-Obs.F.data$W.density)^2
squares <- rbind(squares, values)
}
squares
library(scales)
squares <- data.frame(values = integer())
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
Exp.values <- interp1(sim.q$time.step, sim.q$sym.pop, Obs)
values <- (Exp.values-Obs$W.density)^2
squares <- rbind(squares, values)
}
q = 1
sim.q <- filter(sim.data, sim == q)
print(sim.q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
print(Obs)
max(sim.q$time.step)
Exp.values <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.values
values <- (Exp.values-Obs$W.density)^2
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.density
values <- (Exp.density-Obs$W.density)^2
squares <- rbind(squares, values)
squares <- data.frame(values = integer())
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
print(sim.q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
print(Obs)
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.density
values <- (Exp.density-Obs$W.density)^2
squares <- rbind(squares, values)
}
squares
rss <- summarise(mean(squares$value))
sapply(squares, class)
q = 1
squares <- data.frame(values = integer())
sim.q <- filter(sim.data, sim == q)
print(sim.q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
print(Obs)
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.density
values <- (Exp.density-Obs$W.density)^2
values
squares
squares <- c(squares, values)
squares
squares[1]
typeof(squares)
length(squares)
sqaures$values[1]
squares$values[1]
squares <- vector()
q = 1
sim.q <- filter(sim.data, sim == q)
print(sim.q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
print(Obs)
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.density
values <- (Exp.density-Obs$W.density)^2
values
squares <- c(squares, values)
squares
squares <- vector()
for (q in 1:Q){
sim.q <- filter(sim.data, sim == q)
print(sim.q)
Obs <- filter(Obs.F.data, time.step <= max(sim.q$time.step))
print(Obs)
Exp.density <- interp1(sim.q$time.step, sim.q$sym.pop, Obs$time.step)
Exp.density
values <- (Exp.density-Obs$W.density)^2
values
squares <- c(squares, values)
squares
}
rss <- summarise(mean(squares))
sqaures
squares
rss <- mean(squares)
rss
# Create a dataframe for rss values
Model.fit <- data.frame(model.name = character(), rss = integer())
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
library(metaDigitise)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
View(data)
library(metaDigitise)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
library(tidyverse)
library(reshape2)
library(utils)
library(pracma)
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Model_3/Obs.F.data.Rdata")
# Set working directory
setwd("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code")
save(Obs.F.data, file = "Obs.F.data.Rdata")
Obs.F.plot <- ggplot(data = Obs.F.data, aes(x = time.step, y = W.density))+
geom_line()
Obs.F.plot
# Source code
source("Model_3.R")
source("interpolate.R")
load("Obs.F.data.Rdata")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(1, 2, 6)
K <- c(1, 2, 6)
L <- c(0.2, 1, 1.5, 3)
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("3", a, b, c, sep = "")
dynamic.optimisation.3(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
model.fit <- add_row(model = model.name, rss = load(paste("Model_3/rss.", model.name, ".RData"))
)
}
}
}
dynamic.optimisation.3("test", i = 0.01, j = 1, k = 1, l = 0.2)
model.name = "test"
model.fit <- add_row(model = model.name, rss = load(paste("Model_3/rss.", model.name, ".RData"))
)
load(paste("Model_3/rss.", model.name, ".RData")
)
load(paste("Model_3/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model = model.name, rss = load(paste("Model_3/rss.", model.name, ".RData", sep = "")))
model.fit <- add_row(model = model.name, rss = paste("rss.", model.name, sep = ""))
model.fit <- add_row(model = model.name, rss = get(paste("rss.", model.name, sep = "")))
typeof(rss.test)
sapply(rss.test, class)
rss <- rss.test
save(rss, file = paste("Model_3/rss.", model.name, ".RData", sep = ""))
remove(rss.test)
load(paste("Model_3/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model = model.name, model.rss = rss)
rss
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
model.fit <- add_row(model = model.name, model.rss = rss)
typeof(rss)
model.fit <- add_row(model = "test", model.rss = 20)
View(model.fit)
model.fit <- rbind(model = "test", model.rss = 20)
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
model.fit <- cbind(model = "test", model.rss = 20)
model.fit <- cbind(model = "test", model.rss = 30)
model.fit <- rbind(model = "test", model.rss = 30)
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
model.fit <- add_row(model.fit, model = "test", model.rss = 30)
model.fit <- add_row(model.fit, model = "test", model.rss = 20)
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
model.fit
library(metaDigitise)
data <- metaDigitise("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/Data")
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
library(dplyr)
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Obs.F.data.Rdata")
Obs.F.plot <- ggplot(data = Obs.F.data, aes(x = time.step, y = W.density))+
geom_line()
library(gpplot2)
library(ggplot2)
stages <- c("L1", "L2", "L3", "early.pupae", "late.pupae", "teneral.adult", "2.week.adult", "4.week.adult")
W.density <- c(data$mean[2], data$mean[4], data$mean[6], data$mean[8], data$mean[10], data$mean[12], data$mean[14], data$mean[16])
day <- c(data$mean[1], data$mean[3], data$mean[5], data$mean[7], data$mean[9], data$mean[11], data$mean[13], data$mean[15])
Obs.F.data <- data.frame(stages, day, W.density) %>%
mutate(time.step = day/(9/4))
save(Obs.F.data, file = "Obs.F.data.Rdata")
Obs.F.plot <- ggplot(data = Obs.F.data, aes(x = time.step, y = W.density))+
geom_line()
Obs.F.plot
library(reshape2)
library(utils)
library(pracma)
# Source code
source("Model_4.R")
source("interpolate.R")
load("Obs.F.data.Rdata")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(1, 2, 6)
K <- c(1, 2, 6)
L <- c(0.2, 1, 1.5, 3)
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("4", a, b, c, sep = "")
dynamic.optimisation.4(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
load(paste("Model_4/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
}
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("4", a, b, c, sep = "")
dynamic.optimisation.4(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
load(paste("Model_4/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
}
source("Model_4.R")
source("interpolate.R")
load("Obs.F.data.Rdata")
# Create a dataframe for rss values
model.fit <- data.frame(model = character(), model.rss = integer())
I <- c(0.01, 0.05, 0.1, 0.5, 1)
J <- c(1, 2, 6)
K <- c(1, 2, 6)
L <- c(0.2, 1, 1.5, 3)
for (a in 1:5){
for (b in 1:3){
for (c in 1:3){
model.name = paste("4", a, b, c, sep = "")
dynamic.optimisation.4(model.name, i = I[a], j = J[b], k = K[b], l = L[c])
load(paste("Model_4/rss.", model.name, ".RData", sep = ""))
model.fit <- add_row(model.fit, model = model.name, model.rss = rss)
}
}
}
force(x)
model.fit
model.fit <- arrange(model.fit, asc(rss))
model.fit <- arrange(model.fit, rss)
View(model.fit)
model.fit <- arrange(model.fit, model.rss)
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_4/sim.plot.4231.RData")
sim.plot.4231
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_4/sim.plot.4321.RData")
sim.plot.4321
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_4/sim.plot.4323.RData")
sim.plot.4323
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_4/sim.plot.4332.RData")
sim.plot.4332
load("C:/Users/mw14794/OneDrive - University of Bristol/Documents/PhD/Notes/Model/R_code/Model_4/sim.data.4231.RData")
sim.data.4321
sim.data.4231
investment(0,4)
investment <- function(s, d){
s. = s + (d-1)*j
return(s.)
}
j = 6
inestment(0,4)
investment(0,4)
3*6
